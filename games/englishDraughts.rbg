// English draughts
// -- The game ends in a draw after 20 moves without capturing or moving a man.

#players = black(100), white(100)
#pieces = empty, whiteMan, whiteKing, blackMan, blackKing
#variables = stagnation(20)

#board = rectangle(upRight,downLeft,upLeft,downRight,
         [        ,        ,        ,blackMan,        ,        ,        ]
         [        ,        ,blackMan,blackMan,blackMan,        ,        ]
         [        ,blackMan,blackMan,blackMan,empty   ,empty   ,        ]
         [blackMan,blackMan,blackMan,empty   ,empty   ,whiteMan,whiteMan]
         [blackMan,blackMan,empty   ,empty   ,whiteMan,whiteMan,whiteMan]
         [        ,empty   ,empty   ,whiteMan,whiteMan,whiteMan,        ]
         [        ,        ,whiteMan,whiteMan,whiteMan,        ,        ]
         [        ,        ,        ,whiteMan,        ,        ,        ])

#anySquare = ((upRight + downLeft + upLeft + downRight)*)

#grabPiece(piece) = {piece}[empty]
#dropMan(me; forward) = ({? forward~Left + forward~Right} [me~Man] + {! forward~Left + forward~Right} [me~King])

#potentialJumpInGivenDirection(dir; middleAction; opp) =
    dir
    {opp~Man,opp~King}
    middleAction
    dir
    {empty}

#potentialJumpForward(opp; middleAction; forward) = (
        potentialJumpInGivenDirection(forward~Left; middleAction; opp)
      + potentialJumpInGivenDirection(forward~Right; middleAction; opp)
    )

#potentialJumpAround(opp; middleAction) = (
        potentialJumpForward(opp; middleAction; up)
      + potentialJumpForward(opp; middleAction; down)
    )

#canCapture(me; opp; forward) =
    anySquare
    (
        {me~King} potentialJumpAround(opp; )
      + {me~Man} potentialJumpForward(opp; ; forward)
    )

#nonCapturingManMove(me; forward) =
    grabPiece(me~Man)
    (forward~Left + forward~Right) {empty}
    ->> dropMan(me; forward)

#capturingManMove(me; opp; forward) =
    grabPiece(me~Man)
    potentialJumpForward(opp; [empty]; forward)
    (potentialJumpForward(opp; [empty]; forward))*
    {! potentialJumpForward(opp; ; forward)}
    ->> dropMan(me; forward)

#nonCapturingKingMove(me) =
    grabPiece(me~King)
    (upRight + downLeft + upLeft + downRight) {empty}
    ->> [me~King]

#capturingKingMove(me; opp) =
    grabPiece(me~King)
    potentialJumpAround(opp; [empty])
    (potentialJumpAround(opp; [empty]))*
    {! potentialJumpAround(opp;)}
    ->> [me~King]

#canMove(me; opp; forward) = (
      anySquare
      (
          {me~King} ((upRight + downLeft + upLeft + downRight) {empty} + potentialJumpAround(opp; ))
        + {me~Man} ((forward~Left + forward~Right) {empty} + potentialJumpForward(opp; ; forward))
      )
    )

#turn(me; opp; forward; backward) =
    [$ stagnation = stagnation+1]
    (
        {! canCapture(me; opp; forward)}
        ->me anySquare
        (
            nonCapturingManMove(me; forward) [$ stagnation = 0]
          + nonCapturingKingMove(me)
        )
      + {? canCapture(me; opp; forward)}
        ->me anySquare
        (
            capturingManMove(me; opp; forward)
          + capturingKingMove(me; opp)
        ) [$ stagnation = 0]
    )
    ->>
    (
        {$ stagnation < 20} [$ me=100] [$ opp=0]
      + {$ stagnation == 20} [$ me=50] [$ opp=50] ->> {! canMove(opp; me; backward)} [$ me=100] [$ opp=0]
    )
    

#rules = (
      turn(black; white; down; up)
      turn(white; black; up; down)
    )*
