// Chinese checkers
// -- Six players variant
// -- No alliances
// -- First win ends the game

#players = northPlayer(100), northEastPlayer(100), southEastPlayer(100), southPlayer(100), southWestPlayer(100), northWestPlayer(100)
#variables = turn(200)
#pieces = northPiece, northEastPiece, southEastPiece, southPiece, southWestPiece, northWestPiece, empty

#e = empty
#N = northPiece
#NE = northEastPiece
#SE = southEastPiece
#S = southPiece
#SW = southWestPiece
#NW = northWestPiece

#board = hexagon(northWest, northEast, east, southEast, southWest, west,
                    [   ,   ,   ,   , N ,   ,   ,   ,   ]
                  [   ,   ,   ,   , N , N ,   ,   ,   ,   ]
                [   ,   ,   ,   , N , N , N ,   ,   ,   ,   ]
              [   ,   ,   ,   , N , N , N , N ,   ,   ,   ,   ]
            [NW ,NW ,NW ,NW , e , e , e , e , e ,NE ,NE ,NE ,NE ]
          [   ,NW ,NW ,NW , e , e , e , e , e , e ,NE ,NE ,NE ,   ]
        [   ,   ,NW ,NW , e , e , e , e , e , e , e ,NE ,NE ,   ,   ]
      [   ,   ,   ,NW , e , e , e , e , e , e , e , e ,NE ,   ,   ,   ]
    [   ,   ,   ,   , e , e , e , e , e , e , e , e , e ,   ,   ,   ,   ]
      [   ,   ,   ,SW , e , e , e , e , e , e , e , e ,SE ,   ,   ,   ]
        [   ,   ,SW ,SW , e , e , e , e , e , e , e ,SE ,SE ,   ,   ]
          [   ,SW ,SW ,SW , e , e , e , e , e , e ,SE ,SE ,SE ,   ]
            [SW ,SW ,SW ,SW , e , e , e , e , e ,SE ,SE ,SE ,SE ]
              [   ,   ,   ,   , S , S , S , S ,   ,   ,   ,   ]
                [   ,   ,   ,   , S , S , S ,   ,   ,   ,   ]
                  [   ,   ,   ,   , S , S ,   ,   ,   ,   ]
                    [   ,   ,   ,   , S ,   ,   ,   ,   ])

#anyNeighbor = (northWest + northEast + east + southEast + southWest + west)

#anySquare = anyNeighbor*

#inCorner(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest) =
    {! relativeNorthWest + relativeNorthEast + relativeWest + relativeEast}

#onTriangleBorder(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest) =
    {?
        (
            relativeNorthEast^3
          + relativeNorthEast^2 relativeNorthWest
          + relativeNorthEast relativeNorthWest^2
          + relativeNorthWest^3
        )inCorner(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest)
    }

#onTriangleDoubleBorder(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest) =
    onTriangleBorder(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest)
  + {?
        (
            relativeNorthEast^2
          + relativeNorthEast relativeNorthWest
          + relativeNorthWest^2
        )inCorner(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest)
    }

#filledCorner(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest; piece) =
    anySquare
    inCorner(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest) {piece}
    relativeSouthWest {piece}
    relativeSouthWest {piece}
    relativeSouthWest {piece}
    relativeEast {piece}
    relativeEast {piece}
    relativeEast {piece}
    relativeNorthWest {piece}
    relativeNorthWest {piece}
    relativeSouthWest {piece}

#setUniversalScore(score) =
    [$
        southPlayer = score,
        northPlayer = score,
        northWestPlayer = score,
        northEastPlayer = score,
        southWestPlayer = score,
        southEastPlayer = score
    ]

#everybodyLooses = setUniversalScore(0)
#everybodyTies = setUniversalScore(50)

#southWins =
    filledCorner(northWest; northEast; east; southEast; southWest; west; southPiece)

#southWestWins =
    filledCorner(northEast; east; southEast; southWest; west; northWest; southWestPiece)

#northWestWins =
    filledCorner(east; southEast; southWest; west; northWest; northEast; northWestPiece)

#northWins =
    filledCorner(southEast; southWest; west; northWest; northEast; east; northPiece)

#northEastWins =
    filledCorner(southWest; west; northWest; northEast; east; southEast; northEastPiece)

#southEastWins =
    filledCorner(west; northWest; northEast; east; southEast; southWest; southEastPiece)

#directedSingleJump(direction) =
    direction {! {empty}} direction {empty}

#singleJump(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest) =
    (
        directedSingleJump(relativeNorthWest)
      + directedSingleJump(relativeNorthEast)
      + directedSingleJump(relativeEast)
      + directedSingleJump(relativeWest)
      + {! onTriangleDoubleBorder(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest)}
        (
            directedSingleJump(relativeSouthEast)
          + directedSingleJump(relativeSouthWest)
        )
    )

#neighborJump(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest) =
    (
        relativeNorthWest
      + relativeNorthEast
      + relativeEast
      + relativeWest
      + {! onTriangleBorder(relativeNorthWest; relativeNorthEast; relativeEast; relativeWest)}
        (
            relativeSouthEast
          + relativeSouthWest
        )
    ) {empty}

#movePatternByDirection(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest) =
    (
        neighborJump(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest)
      + singleJump(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest)*
    )

#canMovePatternByDirection(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest) =
    {?
        anySquare
        (
            neighborJump(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest)
          + singleJump(relativeNorthWest; relativeNorthEast; relativeEast; relativeSouthEast; relativeSouthWest; relativeWest)*
        )
    }

#southCanMove =
    canMovePatternByDirection(northWest; northEast; east; southEast; southWest; west)

#southMoves =
    movePatternByDirection(northWest; northEast; east; southEast; southWest; west)

#southWestCanMove =
    canMovePatternByDirection(northEast; east; southEast; southWest; west; northWest)

#southWestMoves =
    movePatternByDirection(northEast; east; southEast; southWest; west; northWest)

#northWestCanMove =
    canMovePatternByDirection(east; southEast; southWest; west; northWest; northEast)

#northWestMoves =
    movePatternByDirection(east; southEast; southWest; west; northWest; northEast)

#northCanMove =
    canMovePatternByDirection(southEast; southWest; west; northWest; northEast; east)

#northMoves =
    movePatternByDirection(southEast; southWest; west; northWest; northEast; east)

#northEastCanMove =
    canMovePatternByDirection(southWest; west; northWest; northEast; east; southEast)

#northEastMoves =
    movePatternByDirection(southWest; west; northWest; northEast; east; southEast)

#southEastCanMove =
    canMovePatternByDirection(west; northWest; northEast; east; southEast; southWest)

#southEastMoves =
    movePatternByDirection(west; northWest; northEast; east; southEast; southWest)

#pickUpPiece(piece) =
    {piece}[empty]

#clearPieces(piece) =
    (anySquare pickUpPiece(piece) ->>)* {! anySquare {piece}}

#defeat(playerDirection) =
    clearPieces(playerDirection~Piece)
    anySquare inCorner(northWest; northEast; east; west)
    [$ playerDirection~Player = 0]

#endGame = ->> {}

#move(playerDirection; movePattern) =
    ->playerDirection~Player
    anySquare
    pickUpPiece(playerDirection~Piece)
    movePattern ->>
    [playerDirection~Piece]

#playerTurn(playerDirection; winCondition; movePattern; canMovePattern) =
    (
        {$ playerDirection~Piece > 0}
        (
            {? canMovePattern} move(playerDirection; movePattern)
            (
                {? winCondition} everybodyLooses [$ playerDirection~Player = 100] endGame
              + {! winCondition}
            )
          + {! canMovePattern} defeat(playerDirection)
        )
      + {$ playerDirection~Piece == 0}
    )
    ->>[$ turn = turn+1]

#rules = everybodyTies
    (
        playerTurn(north; northWins; northMoves; northCanMove)
        playerTurn(northEast; northEastWins; northEastMoves; northEastCanMove)
        playerTurn(southEast; southEastWins; southEastMoves; southEastCanMove)
        playerTurn(south; southWins; southMoves; southCanMove)
        playerTurn(southWest; southWestWins; southWestMoves; southWestCanMove)
        playerTurn(northWest; northWestWins; northWestMoves; northWestCanMove)
    )*
