// International draughts
// -- The game ends in a draw after 20 moves without capturing or moving a man.

#players = white(100), black(100)
#pieces =
    empty, whiteMan, whiteKing, blackMan, blackKing,
    toBeRemoved, manToBeRemoved, kingToBeRemoved, toBeRemovedDuringCheck, manToBePlaced, kingToBePlaced, manToBeMoved, kingToBeMoved
#variables = stagnation(20), actuallyCapturedPieces(12)

#board = rectangle(upRight,downLeft,upLeft,downRight,
         [        ,        ,        ,        ,blackMan,        ,        ,        ,        ]
         [        ,        ,        ,blackMan,blackMan,blackMan,        ,        ,        ]
         [        ,        ,blackMan,blackMan,blackMan,blackMan,empty   ,        ,        ]
         [        ,blackMan,blackMan,blackMan,blackMan,empty   ,empty   ,whiteMan,        ]
         [blackMan,blackMan,blackMan,blackMan,empty   ,empty   ,whiteMan,whiteMan,whiteMan]
         [blackMan,blackMan,blackMan,empty   ,empty   ,whiteMan,whiteMan,whiteMan,whiteMan]
         [        ,blackMan,empty   ,empty   ,whiteMan,whiteMan,whiteMan,whiteMan,        ]
         [        ,        ,empty   ,whiteMan,whiteMan,whiteMan,whiteMan,        ,        ]
         [        ,        ,        ,whiteMan,whiteMan,whiteMan,        ,        ,        ]
         [        ,        ,        ,        ,whiteMan,        ,        ,        ,        ])

#anySquare = ((upRight + downLeft + upLeft + downRight)*)

#grabPiece(piece) = {piece} [empty]
#dropMan(temporaryPiece; me; forward) = {temporaryPiece} ({? forward~Left + forward~Right} [me~Man] + {! forward~Left + forward~Right} [me~King])

#jumpWhileRealMove(direction; opp) =
    direction
    {opp~Man, opp~King}
    [toBeRemoved]
    direction
    {empty, manToBeRemoved, kingToBeRemoved}

#jumpWhileChecking(direction; opp) =
    direction
    {opp~Man, opp~King, toBeRemoved}
    [toBeRemovedDuringCheck]
    direction
    {empty, manToBePlaced, kingToBePlaced}

#jumpWhileCleaning(direction) =
    direction
    {toBeRemoved}
    [empty]
    direction

#manJumpWhileRealMove(opp) =
    (
        jumpWhileRealMove(upLeft; opp)
      + jumpWhileRealMove(upRight; opp)
      + jumpWhileRealMove(downLeft; opp)
      + jumpWhileRealMove(downRight; opp)
    )

#manJumpWhileChecking(opp) =
    (
        jumpWhileChecking(upLeft; opp)
      + jumpWhileChecking(upRight; opp)
      + jumpWhileChecking(downLeft; opp)
      + jumpWhileChecking(downRight; opp)
    )

#realManCapturingMove(me; opp) =
    {me~Man} [manToBeRemoved]
    manJumpWhileRealMove(opp)
    (manJumpWhileRealMove(opp))*

#checkingManCapturingMove(me; opp) =
    grabPiece(me~Man, manToBeRemoved, manToBeMoved)
    manJumpWhileChecking(opp)
    (manJumpWhileChecking(opp))*

#kingJumpWhileRealMove(opp) =
    (
        jumpWhileRealMove(upLeft ({empty, manToBeRemoved, kingToBeRemoved} upLeft)*; opp)
      + jumpWhileRealMove(upRight ({empty, manToBeRemoved, kingToBeRemoved} upRight)*; opp)
      + jumpWhileRealMove(downLeft ({empty, manToBeRemoved, kingToBeRemoved} downLeft)*; opp)
      + jumpWhileRealMove(downRight ({empty, manToBeRemoved, kingToBeRemoved} downRight)*; opp)
    )

#kingJumpWhileChecking(opp) =
    (
        jumpWhileChecking(upLeft ({empty, manToBePlaced, kingToBePlaced} upLeft)*; opp)
      + jumpWhileChecking(upRight ({empty, manToBePlaced, kingToBePlaced} upRight)*; opp)
      + jumpWhileChecking(downLeft ({empty, manToBePlaced, kingToBePlaced} downLeft)*; opp)
      + jumpWhileChecking(downRight ({empty, manToBePlaced, kingToBePlaced} downRight)*; opp)
    )

#realKingCapturingMove(me; opp) =
    {me~King} [kingToBeRemoved]
    kingJumpWhileRealMove(opp)
    (kingJumpWhileRealMove(opp))*

#checkingKingCapturingMove(me; opp) =
    grabPiece(me~King, kingToBeRemoved, kingToBeMoved)
    kingJumpWhileChecking(opp)
    (kingJumpWhileChecking(opp))*

#noncapturingManMove(me; forward) =
    {me~Man} [manToBeRemoved]
    (forward~Left + forward~Right)
    {empty}

#noncapturingKingMove(me) =
    {me~King} [kingToBeRemoved]
    (
        upLeft ({empty} upLeft)*
      + upRight ({empty} upRight)*
      + downLeft ({empty} downLeft)*
      + downRight ({empty} downRight)*
    )
    {empty}

#realKingMove(me; opp) =
    (
        realKingCapturingMove(me; opp)
      + noncapturingKingMove(me)
    )
    (
        {empty}[kingToBePlaced]
      + {kingToBeRemoved}[kingToBeMoved]
    )

#realManMove(me; opp; forward) =
    (
        realManCapturingMove(me; opp)
      + noncapturingManMove(me; forward)
    )
    (
        {empty}[manToBePlaced]
      + {manToBeRemoved}[manToBeMoved]
    )

#selectMove(me; opp; forward) =
    anySquare
    (
        realKingMove(me; opp)
      + realManMove(me; opp; forward) [$ stagnation = 0]
    )

#checkingMove(me; opp) =
    anySquare
    (
        checkingKingCapturingMove(me; opp)
      + checkingManCapturingMove(me; opp)
    )

#cleaningJumpSequence =
    (
        jumpWhileCleaning(upLeft (upLeft)*)
      + jumpWhileCleaning(upRight (upRight)*)
      + jumpWhileCleaning(downLeft (downLeft)*)
      + jumpWhileCleaning(downRight (downRight)*)
    )

#cleaningNeighborMove =
    (
        (upLeft)*
      + (upRight)*
      + (downLeft)*
      + (downRight)*
    )

#applyMove(me; forward) =
    (
        dropMan(manToBePlaced; me; forward)
      + {kingToBePlaced} [me~King]
      + {manToBeMoved,kingToBeMoved}
    )
    (
        cleaningJumpSequence*
      + cleaningNeighborMove
    )
    (
        grabPiece(manToBeRemoved,kingToBeRemoved)
      + {kingToBeMoved} [me~King]
      + dropMan(manToBeMoved; me; forward)
    )

#canCaptureMore(me; opp) =
    [$ actuallyCapturedPieces = toBeRemoved]
    checkingMove(me; opp)
    {$ toBeRemovedDuringCheck > actuallyCapturedPieces}

#potentialJumpInGivenDirection(dir; opp) = dir {opp~Man,opp~King} dir {empty}
#potentialFlyingJumpInGivenDirection(dir; opp) = dir ({empty} dir)* {opp~Man,opp~King} dir {empty}
#canMove(me; opp; forward) = (
      anySquare (
          {me~King} (
                (upRight + downLeft + upLeft + downRight) {empty}
              + potentialFlyingJumpInGivenDirection(upRight; opp)
              + potentialFlyingJumpInGivenDirection(upLeft; opp)
              + potentialFlyingJumpInGivenDirection(downRight; opp)
              + potentialFlyingJumpInGivenDirection(downLeft; opp)
          )
        + {me~Man} (
                (forward~Left + forward~Right) {empty}
              + potentialJumpInGivenDirection(upRight; opp)
              + potentialJumpInGivenDirection(upLeft; opp)
              + potentialJumpInGivenDirection(downRight; opp)
              + potentialJumpInGivenDirection(downLeft; opp)
            )
      )
    )

#turn(me; opp; forward; backward) =
    [$ stagnation = stagnation+1]
    ->me selectMove(me; opp; forward)
    {! canCaptureMore(me; opp)}
    ->> applyMove(me; forward)
    {$ toBeRemoved + manToBeRemoved + kingToBeRemoved + manToBePlaced + kingToBePlaced + manToBeMoved + kingToBeMoved == 0}
    ->>
    (
        {$ stagnation < 20} [$ me=100] [$ opp=0]
      + {$ stagnation == 20} [$ me=50] [$ opp=50] ->> {! canMove(opp; me; backward)} [$ me=100] [$ opp=0]
    )

#rules = (
      turn(white; black; up; down)
      turn(black; white; down; up)
    )*
