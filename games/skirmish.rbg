// Chess skirmish
// -- The movement rules are as in chess, except that king is a regular piece.
// -- The play ends when a player does not have a legal move or 100 turn limit is reached.
// -- The player with more pieces left wins.

#anyRook(color) = color~RookMoved, color~RookUnmoved
#majorPieces(color) = color~RookMoved, color~Knight, color~Bishop, color~Queen
#singleColorPieces(color) = color~Pawn, color~King, anyRook(color), color~Knight, color~Bishop, color~Queen
#emptyOrColor(color) = singleColorPieces(color), empty
#allPieces = singleColorPieces(white), singleColorPieces(black)

#players = white(100), black(100)
#pieces = allPieces, empty
#variables = pawnDoubleMove(1), whiteKingMoved(1), blackKingMoved(1), turnCount(99)

#board = rectangle(up,down,left,right,
         [blackRookUnmoved, blackKnight, blackBishop, blackQueen, blackKing, blackBishop, blackKnight, blackRookUnmoved]
         [blackPawn       , blackPawn  , blackPawn  , blackPawn , blackPawn, blackPawn  , blackPawn  , blackPawn       ]
         [empty           , empty      , empty      , empty     , empty    , empty      ,empty       , empty           ]
         [empty           , empty      , empty      , empty     , empty    , empty      ,empty       , empty           ]
         [empty           , empty      , empty      , empty     , empty    , empty      ,empty       , empty           ]
         [empty           , empty      , empty      , empty     , empty    , empty      ,empty       , empty           ]
         [whitePawn       , whitePawn  , whitePawn  , whitePawn , whitePawn, whitePawn  , whitePawn  , whitePawn       ]
         [whiteRookUnmoved, whiteKnight, whiteBishop, whiteQueen, whiteKing, whiteBishop, whiteKnight, whiteRookUnmoved])

#anySquare = (left* + right*)(up* + down*)
#anyNeighborSquare = (left + right + up + down + (left + right)(up + down))

#diagonalLine = (
        (up left {empty})* up left
      + (up right {empty})* up right
      + (down left {empty})* down left
      + (down right {empty})* down right
    )

#parallelLine = (
        (up {empty})* up
      + (down {empty})* down
      + (right {empty})* right
      + (left {empty})* left
    )

#knightHop = (
        (up^2 + down^2)(left + right)
      + (left^2 + right^2)(up + down)
    )

#captureAnyBy(capturingPiece; oppColor) = {emptyOrColor(oppColor)} [capturingPiece]

#pickUpPiece(piece) = {piece}[empty]

#standardMove(piece; movePattern; oppColor) =
    pickUpPiece(piece)
    movePattern
    captureAnyBy(piece; oppColor)

#bishopMove(color; oppColor) = standardMove(color~Bishop; diagonalLine; oppColor)
#knightMove(color; oppColor) = standardMove(color~Knight; knightHop; oppColor)
#queenMove(color; oppColor) = standardMove(color~Queen; (diagonalLine + parallelLine); oppColor)

#rookMove(color; oppColor) =
    pickUpPiece(anyRook(color))
    parallelLine
    captureAnyBy(color~RookMoved; oppColor)

#standardKingMove(color; oppColor) =
    anyNeighborSquare
    captureAnyBy(color~King; oppColor)

#castlingKingMove(forward; backward; color; oppColor) =
    {$ color~KingMoved==0}
    (
        right {empty}
        right {empty} [color~King]
        right pickUpPiece(color~RookUnmoved)
        left^2
      + left {empty}
        left {empty} [color~King]
        left {empty}
        left pickUpPiece(color~RookUnmoved)
        right^3
    )
    [color~RookMoved]

#kingMove(forward; backward; color; oppColor) = (
      pickUpPiece(color~King)
      (
          standardKingMove(color; oppColor)
        + castlingKingMove(forward; backward; color; oppColor)
      ) [$ color~KingMoved=1]
    )

#checkForPromotion(forward; color) = (
        {? forward} [color~Pawn]
      + {! forward} [majorPieces(color)]
    )

#standardPawnMove(forward; backward; color; oppColor) =
    pickUpPiece(color~Pawn)
    (
        (
            forward {empty}
          + forward (left + right) {singleColorPieces(oppColor)}
        )
        checkForPromotion(forward; color)
      + {! backward^2}
        (forward {empty})^2
        [color~Pawn] // Promotion cannot occur
        [$ pawnDoubleMove=1]
    )

#enPassantPawnMove(forward; color) =
    {$ pawnDoubleMove==1}
    (
        // We are sure that the current square is occupied by oppColor~Pawn, because pawnDoubleMove==1, so do not check it
        right pickUpPiece(color~Pawn) left
      + left pickUpPiece(color~Pawn) right
    )
    [empty] forward [color~Pawn] [$ pawnDoubleMove=0]

#move(forward; backward; color; oppColor) = (
      [$ pawnDoubleMove=0]
      anySquare
      (
          bishopMove(color; oppColor)
        + rookMove(color; oppColor)
        + knightMove(color; oppColor)
        + queenMove(color; oppColor)
        + kingMove(forward; backward; color; oppColor)
        + standardPawnMove(forward; backward; color; oppColor)
      )
    + enPassantPawnMove(forward; color)
  )

#sumPieces(color) = (color~King + color~Queen + color~RookMoved + color~RookUnmoved + color~Bishop + color~Knight + color~Pawn)
#setScores = (
      {$ sumPieces(white) > sumPieces(black)} [$ white = 100,black = 0]
    + {$ sumPieces(white) < sumPieces(black)} [$ white = 0,black = 100]
    + {$ sumPieces(white) == sumPieces(black)} [$ white = 50,black = 50]
  )

#turn(forward; backward; color; oppColor) = (
    ->color move(forward; backward; color; oppColor)
    ->> setScores
    ->> [$ turnCount=turnCount+1]
  )

#rules = (
    turn(up;down;white;black)
    turn(down;up;black;white)
  )*
