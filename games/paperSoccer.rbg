// Paper soccer
// notes:
// - 10x10 pitch + 2x1 goals
// - being unable to move ball means a defeat
// - goal is single square in the center of the last/first line, you must reach this square to win
// - edges are marked with "visited" for the sake of simplicity
// - empty squares are always empty, their purpose is to place ball (i.e. current square) at them


#players = white(100), black(100)
#pieces = ball, whiteGoal, blackGoal, empty, visited, notVisited, justArrived
#variables =

#leftMarkedTriplet(mark; between) = mark, between, between
#rightMarkedTriplet(mark; between) = between, between, mark

#lineTemplate(edgeColumns; nonGoalBetween; nonGoalColumns; goalEdgeColumns; goalBetween; goalColumn) =
    [
        leftMarkedTriplet(edgeColumns; nonGoalBetween),
        leftMarkedTriplet(nonGoalColumns; nonGoalBetween),
        leftMarkedTriplet(nonGoalColumns; nonGoalBetween),
        leftMarkedTriplet(goalEdgeColumns; goalBetween),
        goalColumn,
        rightMarkedTriplet(goalEdgeColumns; goalBetween),
        rightMarkedTriplet(nonGoalColumns; nonGoalBetween),
        rightMarkedTriplet(nonGoalColumns; nonGoalBetween),
        rightMarkedTriplet(edgeColumns; nonGoalBetween)
    ]

#whiteGoalLine =
    lineTemplate(visited; visited; visited;   empty;    visited;  whiteGoal)
    lineTemplate(visited; visited; visited; visited; notVisited; notVisited)
    lineTemplate(visited; visited; visited; visited; notVisited; notVisited)

#blackGoalLine =
    lineTemplate(visited; visited; visited; visited; notVisited; notVisited)
    lineTemplate(visited; visited; visited; visited; notVisited; notVisited)
    lineTemplate(visited; visited; visited;   empty;    visited;  blackGoal)

#whiteFirstNonGoalLine =
    lineTemplate(  empty;    visited;      empty;      empty; notVisited;      empty)
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)

#blackFirstNonGoalLine =
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)
    lineTemplate(  empty;    visited;      empty;      empty; notVisited;      empty)

#whiteRegularLine =
    lineTemplate(  empty; notVisited;      empty;      empty; notVisited;      empty)
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)

#blackRegularLine =
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)
    lineTemplate(visited; notVisited; notVisited; notVisited; notVisited; notVisited)
    lineTemplate(  empty; notVisited;      empty;      empty; notVisited;      empty)

#board =
    rectangle(up,down,left,right,
        whiteGoalLine
        whiteFirstNonGoalLine
        whiteRegularLine
        whiteRegularLine
        whiteRegularLine
        whiteRegularLine
        lineTemplate(empty; notVisited; empty; empty; notVisited; ball)
        blackRegularLine
        blackRegularLine
        blackRegularLine
        blackRegularLine
        blackFirstNonGoalLine
        blackGoalLine
    )


#findBall = (up* + down*)(left* + right*){ball}[empty]

#canMoveFurther =
    (up + down + left + right + (up + down)(left + right)){visited}

#changeNeighbor(from; to) =
    (
        up{from}[to]down
      + down{from}[to]up
      + right{from}[to]left
      + left{from}[to]right
      + down left{from}[to]up right
      + down right{from}[to]up left
      + up left{from}[to]down right
      + up right{from}[to]down left
    )

#changeJustArrivedIntoVisited =
    changeNeighbor(justArrived; visited)

#visitAuxiliarySquare(direction; how) =
    direction{notVisited}[how]

#jumpInGivenDirection(direction) =
    {empty}
    visitAuxiliarySquare(direction; visited)
    visitAuxiliarySquare(direction; justArrived)
    direction{empty, whiteGoal, blackGoal}

#singleJump =
    (
        jumpInGivenDirection(up)
      + jumpInGivenDirection(down)
      + jumpInGivenDirection(left)
      + jumpInGivenDirection(right)
      + jumpInGivenDirection(up left)
      + jumpInGivenDirection(up right)
      + jumpInGivenDirection(down left)
      + jumpInGivenDirection(down right)
    )

#turn(me; opp) =
    ->me singleJump
    (
        {? canMoveFurther}
        changeJustArrivedIntoVisited
        singleJump
    )*
    {! canMoveFurther}
    ->> changeJustArrivedIntoVisited
    (
        {whiteGoal} [$ black=100, white=0] ->> {}
      + {blackGoal} [$ white=100, black=0] ->> {}
      + {empty} [$ me=100, opp=0]
    )

#rules = findBall (
    turn(white; black)
    turn(black; white)
  )*
