// The Mill Game (Nine men's morris)
// -- The play ends with a draw after 50 moves without forming a mill.

#pieces = empty, whitePiece, blackPiece
#players = white(100), black(100)
#variables = stagnation(50)

#circleSegment(
    v;id1;id2;id3;previousOnCircle;
    parallelDirection1;parallelDirection2;
    insideDirection;outsideDirection;
    outsideCircleNeighbor;insideCircleNeighbor) =
        v~id1 [empty] {parallelDirection1: v~id2, insideDirection: v~previousOnCircle}
        v~id2 [empty] {parallelDirection1: v~id3, parallelDirection2: v~id1 insideCircleNeighbor outsideCircleNeighbor}

#circle(
    name;
    outsideLeft;outsideUp;outsideRight;outsideDown;
    insideLeft;insideUp;insideRight;insideDown) =
        circleSegment(name;1;2;3;8;up;down;right;left;outsideLeft;insideLeft)
        circleSegment(name;3;4;5;2;right;left;down;up;outsideUp;insideUp)
        circleSegment(name;5;6;7;4;down;up;left;right;outsideRight;insideRight)
        circleSegment(name;7;8;1;6;left;right;up;down;outsideDown;insideDown)

#board =
    circle(
        outer;
        ;;;;
        ,right: middle2;,down: middle4;,left: middle6;,up: middle8)
    circle(
        middle;
        ,left: outer2;,up: outer4;,right: outer6;,down: outer8;
        ,right: inner2;,down: inner4;,left: inner6;,up: inner8)
    circle(
        inner;
        ,left: middle2;,up: middle4;,right: middle6;,down: middle8;
        ;;;)


#anyNeighbor = (up+down+left+right)
#anySquare = anyNeighbor*

#isPartOfDirectedMill(color;direction1;direction2) = (
        direction1 {color~Piece} (direction1 + direction2^2) {color~Piece}
      + (direction2 {color~Piece})^2
    )
#isPartOfMill(color) = (
        isPartOfDirectedMill(color;up;down)
      + isPartOfDirectedMill(color;left;right)
    )

#pieceOutOfMill(color) = anySquare {color~Piece} {! isPartOfMill(color)}

#findAndCaptureOpponentOutOfMill(color) =
    anySquare {color~Piece} {! isPartOfMill(color)} ->> [empty] [$ stagnation = 0]

#findAndCaptureOpponentAny(color) =
    anySquare {color~Piece} ->> [empty] [$ stagnation = 0]

#captureOutOfMill(color;opponentColor) = (
        {! isPartOfMill(color)} ->>
      + {? isPartOfMill(color)} findAndCaptureOpponentOutOfMill(opponentColor)
    )
#captureAny(color;opponentColor) = (
        {! isPartOfMill(color)} ->>
      + {? isPartOfMill(color)} findAndCaptureOpponentAny(opponentColor)
    )

#putPiece(color) =
    ->color anySquare {empty} [color~Piece]

#firstPhaseTurn(color;opponentColor) =
    [$ stagnation = stagnation + 1]
    (
        {? pieceOutOfMill(opponentColor)}
        putPiece(color)
        captureOutOfMill(color;opponentColor)
      + {! pieceOutOfMill(opponentColor)}
        putPiece(color)
        captureAny(color;opponentColor)
    )

#movePiece(color) = (
        {$ color~Piece > 3} ->color
        anySquare {color~Piece} [empty]
        anyNeighbor
      + {$ color~Piece == 3} ->color
        anySquare {color~Piece} [empty]
        anySquare
    ) {empty} [color~Piece]

#endTurn(color;opponentColor) =
    (
        {$ stagnation < 50}
      + {$ stagnation == 50} [$ color=50, opponentColor=50] ->> {}
    )
    [$ color=100, opponentColor=0]
    (
        {$ opponentColor~Piece >= 3}
      + {$ opponentColor~Piece < 3} ->> {}
    )

#secondPhaseTurn(color;opponentColor) =
    [$ stagnation = stagnation + 1]
    (
        {? pieceOutOfMill(opponentColor)}
        movePiece(color)
        captureOutOfMill(color;opponentColor)
      + {! pieceOutOfMill(opponentColor)}
        movePiece(color)
        captureAny(color;opponentColor)
    )
    endTurn(color;opponentColor)

#rules = [$ black=100, white=0]
    (
        firstPhaseTurn(white;black)
        firstPhaseTurn(black;white)
    )^9
    (
        secondPhaseTurn(white;black)
        secondPhaseTurn(black;white)
    )*
